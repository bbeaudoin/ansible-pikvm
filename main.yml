# Definitely a work in progress. Quick and dirty playbook for PiKVM setup.
---
- name: Configure PiKVM
  hosts: "{{ hosts | default('all') }}"
  gather_facts: false

  pre_tasks:
    - name: Remount read-write to prepare for changes
      ansible.builtin.command: rw
      register: read_write
      changed_when: false

    - name: Combine group-specific packages with host-specific packages
      ansible.builtin.set_fact:
        package_list: "{{ (group_packages | default([]) + host_packages | default([])) | unique }}"

  tasks:
    - name: Attempt to configure PiKVM. Reboot on non-ignored errors.
      block:
        - name: Ensure the hostname is set according to preference
          ansible.builtin.hostname:
            name: "{{ hostname | default(inventory_hostname) }}"

        - name: Ensure the timezone is set according to preference
          community.general.timezone:
            name: "{{ timezone }}"

        - name: Ensure the mirrorlist is set according to preference
          ansible.builtin.copy:
            src: mirrorlist
            dest: /etc/pacman.d/mirrorlist
            mode: u=rw,g=r

        - name: Ensure the default root password is replaced
          ansible.builtin.user:
            name: root
            password: "{{ lookup('ansible.builtin.password', password_root, chars=['ascii_letters', 'digits', 'punctuation'], encrypt='sha512_crypt') }}"

        - name: Ensure the default kvmd admin password is replaced
          ansible.builtin.lineinfile:
            path: /etc/kvmd/htpasswd
            regexp: "^admin:"
            line: admin:{{ lookup('ansible.builtin.password', password_admin, chars=['ascii_letters', 'digits', 'punctuation'], encrypt='bcrypt') }}
          notify:
            - Reboot PiKVM

        - name: Ensure kvmd is allowed to restart or reboot itself
          ansible.builtin.copy:
            content: "kvmd ALL=(root) NOPASSWD: /usr/bin/reboot, /usr/bin/poweroff, /usr/bin/systemctl restart kvmd"
            dest: /etc/sudoers.d/ansible-kvmd
            mode: u=rw,g=r

        - name: Ensure appropriate host override template is deployed
          ansible.builtin.template:
            src: override.yaml.j2
            dest: /etc/kvmd/override.yaml
            mode: u=rw,g=r
          when: overrides is defined
          notify:
            - Restart kvmd

        # Download the latest CyberPower MIB from the CyberPower website:
        # https://www.cyberpowersystems.com/products/software/mib-files/
        - name: Install the CyberPower MIB for CyberPower ATS and PDU support
          ansible.builtin.copy:
            src: cyberpower_mib
            dest: /usr/share/snmp/mibs/
            mode: u=rw,g=r
          when: cyberpower_mib is defined

        - name: Refresh the package cache and install available updates
          community.general.pacman:
            upgrade: true
            update_cache: true
          register: reboot_required
          notify:
            - Reboot PiKVM
          # Note, the error "could not update package db" indicates a mirror
          # could not be reached. Other errors may need manual intervention.
          ignore_errors: true

        - name: Install additional packages from a list of desired packages
          community.general.pacman:
            name: "{{ item }}"
            state: latest
          with_items: "{{ package_list | default([]) }}"
          register: packages
          # While an error installing an optional package may not cause an
          # issue with a reboot, manual intervention may be needed here.
          ignore_errors: true

        - name: Ensure the firewall rules are set as defined in the host vars
          ansible.builtin.template:
            src: public.xml.j2
            dest: /etc/firewalld/zones/public.xml
            mode: u+rw,g=r,o=r
          when: firewall_config is defined
          register: firewall_rule

        - name: Ensure the firewall service is enabled and started
          ansible.builtin.systemd:
            name: firewalld
            state: started
            enabled: true
          register: firewall_service

        # This should only run if the firewall config is changed
        - name: Reload the firewall configuration
          ansible.builtin.shell: firewall-cmd --reload
          when:
            - firewall_rule is changed and firewall_service is not changed
          changed_when: true

        # Changed this from an "always" task to a task that is best handled
        # by a rescue task. With the potential for update issues, a more
        # granular set of blocks may be needed to handle failures.
        - name: Remount read-only to protect the SD card
          ansible.builtin.command: ro
          register: remount_task
          changed_when: remount_task.rc != 0
          failed_when: remount_task.rc != 0

      # The rescue block will reboot PiKVM if there were any errors, such
      # as failing to remount the SD card read-only, to avoid later wear.
      rescue:
        - name: Recover failed tasks by sending PiKVM for a reboot
          ansible.builtin.reboot:
          register: rebooted

  handlers:
    - name: Reboot PiKVM
      ansible.builtin.reboot:
      register: rebooted

    - name: Restart kvmd
      ansible.builtin.systemd:
        name: kvmd
        state: restarted
      when: rebooted is undefined
